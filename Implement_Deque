#include <bits/stdc++.h> 
class Deque
{
    int *arr;
    int f;
    int r;
    int size;
public:
    
    Deque(int n)
    {
        size = n;
        arr = new int [n];
        f = -1;
        r = -1;
        // Write your code here.
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        if(isFull()){
            return false;
        } 
        else if (f == -1) {
          f = 0;
          r = 0;
        } 
        else if (f == 0 && r != size-1){
            f = size-1;
        }
        else{
            f-=1;
        }
        arr[f] = x;
        return true;
        // Write your code here.
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        if(isFull()){
            return false;
        } 
        else if (f == -1) {
          f = 0;
          r = 0;
        } 
        else if (r==size-1 && f != 0){
            r = 0;
        }
        else{
            r+=1;
        }
        arr[r] = x;
        return true;
        // Write your code here.
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if(isEmpty()){
            return -1;
        }
        int ans = arr[f];
        arr[f] = -1;
        if(f==r){
            f = -1;
            r = -1;
        }
        else if (f==size-1){
            f = 0;
        }
        else{
            f+=1;
        }
        return ans;
        // Write your code here.
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if(isEmpty()){
            return -1;
        }
        int ans = arr[r];
        arr[r] = -1;
        if(f==r){
            f = -1;
            r = -1;
        }
        else if (r==0){
            r = size-1;
        }
        else{
            r-=1;
        }
        return ans;
        // Write your code here.
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(isEmpty()){
            return -1;
        }
        return arr[f];
        // Write your code here.
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if(isEmpty()){
            return -1;
        }
        return arr[r];
        // Write your code here.
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if (f == -1)
        {
            return true;
        }
        return false;
        // Write your code here.
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if((f==0 && r==size-1)){
            return true;
        }
        if(f!=0){
          if (r == (f - 1) % (size - 1)) {
            return true;
          }
        }
        return false;
        // Write your code here.
    }
};
